#!/usr/bin/env bash
source /root/source.txt
source /root/userdata.txt

set -o errexit
set -o pipefail
set -o nounset

echo 'nameserver 8.8.8.8' > /etc/resolv.conf
echo 'nameserver 8.8.4.4' >> /etc/resolv.conf

mount -t proc proc proc/
mount -t sysfs sys sys/

export DEBIAN_FRONTEND="noninteractive"

apt-get update
apt-get install -y apt-utils
### Locales
apt install -y locales locales-all
localedef -c -f UTF-8 -i en_US en_US.UTF-8
dpkg-reconfigure locales
### Timezone
ln -snf /usr/share/zoneinfo/America/New_York /etc/localtime
echo -n 'America/New_York' > /etc/timezone
apt upgrade -y
apt dist-upgrade -y
apt install -y ${PKGS1}
echo
echo -n 'bcm2711' > /etc/hostname
sed -i '1 a 127.0.1.1	bcm2711' /etc/hosts
adduser ${user} --gecos "bcm2711" --disabled-password
### Password
echo "${user}:${passwd}" | chpasswd
adduser ${user} sudo
adduser ${user} audio
adduser ${user} dialout
adduser ${user} video
adduser ${user} disk
groupadd spi
groupadd i2c
groupadd gpio
adduser ${user} spi
adduser ${user} i2c
adduser ${user} gpio

#### Scripts
echo
echo Creating firstboot.
tee /usr/local/sbin/firstboot <<EOF
#!/bin/bash
### Functions
grow_mmcblk () {
bash growpart /dev/mmcblk0 2 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk0p2 > /dev/null 2>&1
}

grow_mmcblk1 () {
bash growpart /dev/mmcblk1 2 > /dev/null 2>&1
sleep 1s
resize2fs /dev/mmcblk1p2 > /dev/null 2>&1
}

grow_sda () {
bash growpart /dev/sda 2 > /dev/null 2>&1
sleep 1s
resize2fs /dev/sda2 > /dev/null 2>&1
}

chk_mmcblk () {
fsck.fat -trawl /dev/mmcblk0p1 > /dev/null 2>&1
}

chk_mmcblk1 () {
fsck.fat -trawl /dev/mmcblk1p1 > /dev/null 2>&1
}

chk_sda () {
fsck.fat -trawl /dev/sda1 > /dev/null 2>&1
}

### Grow Partition
echo
echo -e "\e[0;31mGrumble Grumble ...\e[0m"
if touch -f /dev/mmcblk0 2>/dev/null; then grow_mmcblk;
        else echo "Checking for USB boot ..." &>/dev/null;
fi

if touch -f /dev/mmcblk1 2>/dev/null; then grow_mmcblk1;
        else echo "" &>/dev/null;
fi

if touch -f /dev/sda 2>/dev/null; then grow_sda;
        else echo "" &>/dev/null;
fi

### Renew SSH keys
sleep 1s
/bin/rm -v /etc/ssh/ssh_host_*
dpkg-reconfigure openssh-server
service ssh restart

### Fix boot partition
umount /boot
sleep 1s
if touch -f /dev/mmcblk0 2>/dev/null; then chk_mmcblk;
        else echo "Checking for USB boot ..." &>/dev/null;
fi

if touch -f /dev/mmcblk1 2>/dev/null; then chk_mmcblk1;
        else echo "" &>/dev/null;
fi

if touch -f /dev/sda 2>/dev/null; then chk_sda;
        else echo "" &>/dev/null;
fi
sleep 1s
mount /boot

### Clean up
rm -f /var/cache/debconf/*
rm -f /usr/local/sbin/firstboot
update-rc.d firstboot remove
rm /etc/init.d/firstboot
EOF

echo
echo Creating actled switch.
tee /usr/local/sbin/actled <<EOF
#!/bin/bash
sh -c 'echo 0 > /sys/devices/platform/leds/leds/led0/brightness'
EOF

echo
echo Creating pwrled switch.
tee /usr/local/sbin/pwrled <<EOF
#!/bin/bash
sh -c 'echo 0 > /sys/devices/platform/leds/leds/led1/brightness'
EOF

echo
echo Creating set governor.
tee /usr/local/sbin/set-governor <<EOF
#!/bin/bash
# set governor
echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
EOF
chmod +x /usr/local/sbin/*
chown -R root:root /usr/local/sbin/

echo
echo Moving scripts.
sleep 1s
cd ~
mkdir -p /usr/local/bin
mkdir -p /usr/local/sbin
# Scripts
mv -f run-setup /usr/local/bin/
mv -f sysinfo /usr/local/bin/
mv -f temp-monitor /usr/local/bin/tmon
mv -f wifiscan /usr/local/bin/
mv -f deb-eeprom-update /usr/local/bin/
mv -f growpart /usr/bin/
mv -f credentials.sh /usr/local/bin/credentials
# Inits
mv -f firstboot /etc/init.d/
mv -f pwrledoff /etc/init.d/
mv -f actledoff /etc/init.d/
mv -f governor /etc/init.d/
mv -f bthelper /etc/init.d/
mv -f zramswap /etc/init.d/
mv -f network /etc/init.d/
mv -f credentials /etc/init.d/
# Own
chmod +x /usr/bin/growpart
chown root:root /usr/bin/growpart
chmod +x /usr/local/bin/*
chown -R root:root /usr/local/bin/
echo Done.

#### MOTD
echo
echo Adding motd.
sleep 1s
mkdir -p /etc/update-motd.d
tee /etc/update-motd.d/15-brand <<EOF
#!/bin/bash
echo
toilet -f small --filter metal '${BRAND4}'
echo 
EOF
mv -f 20-sysinfo /etc/update-motd.d/20-sysinfo
rm -f /etc/update-motd.d/10-help-text
chmod +x /etc/update-motd.d/*
chown root:root /etc/update-motd.d/15-brand
chown root:root /etc/update-motd.d/20-sysinfo
echo Done.

### Move mc skins
echo
echo Adding mc skins.
sleep 1s
mkdir -p /usr/share/mc/skins
mv -f darkgreen.ini /usr/share/mc/skins/darkgreen.ini
mv -f darkred.ini /usr/share/mc/skins/darkred.ini
echo Done.
echo
echo Adding mc ini and nanorc
sleep 1s
mkdir -p /root/.config/mc
mv -f root-ini /root/.config/mc/ini
mv -f nanorc-root /root/.nanorc
mkdir -p /home/${user}/.config/mc
mv -f user-ini /home/${user}/.config/mc/ini
mv -f nanorc-user /home/${user}/.nanorc
chown -R root:root /root
chown -R ${user}:${user} /home/${user}
echo Done.

#### Adding firmware
echo
echo Adding pi firmware.
sleep 1s
apt install -y zip unzip p7zip-full
unzip -qq master.zip
rm -f master.zip
mkdir -p /lib/firmware
mv -f firmware-nonfree-master/* /lib/firmware
rm -fdR firmware-nonfree-master
cd /lib/firmware/brcm
wget -cq --show-progress https://raw.githubusercontent.com/openwrt/cypress-nvram/master/brcmfmac43455-sdio.raspberrypi%2C4-model-b.txt
cd ~
echo Done.

#### Extra bluetooth firmware
echo
echo Adding extra bluetooth firmware.
sleep 1s
mv fw-0a5c_21e8.hcd /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
cp /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A1-0a5c-21e8.hcd
chown root:root /lib/firmware/brcm/BCM20702A0-0a5c-21e8.hcd
echo Done.

####
echo
echo Bluetooth udev rule.
sleep 1s
mkdir -p /lib/udev/rules.d/
mv -f 99-com.rules /lib/udev/rules.d/99-com.rules
echo Done.

#### Software
echo
echo Installing needed packages.
sleep 1s
apt -y clean
apt -y autoclean
apt update
apt install -y ${PKGS2}

### Network Setup
echo
echo Adding network configs and rules.
sleep 1s
rm -f /etc/network/interfaces
ln -sr /etc/network/if-up.d/00check-network-cable /etc/network/if-pre-up.d/00check-network-cable
sed -i 's/#CONFIGURE_INTERFACES=yes/CONFIGURE_INTERFACES=yes/g' /etc/default/networking
sed -i 's/#WAIT_ONLINE_METHOD=ifup/WAIT_ONLINE_METHOD=ifup/g' /etc/default/networking
sed -i 's/#WAIT_ONLINE_TIMEOUT=300/WAIT_ONLINE_TIMEOUT=10/g' /etc/default/networking
mv -f credentials.txt /boot/rename_to_credentials.txt

tee /etc/opt/interfaces.manual <<EOF
### Interfaces
source /etc/network/interfaces.d/*

### Loopback network interface
auto lo
iface lo inet loopback

### Ethernet
allow-hotplug eth0
iface eth0 inet dhcp
    #address 10.0.0.10
    #netmask 255.255.255.0
    #gateway 10.0.0.1
    #dns-nameservers 8.8.8.8 8.8.4.4

### Mobile tether
#allow-hotplug usb0
#iface usb0 inet dhcp

### Wifi
allow-hotplug wlan0
iface wlan0 inet dhcp
	wireless-power off
	#address 10.0.0.10
	#netmask 255.255.255.0
	#gateway 10.0.0.1
	#dns-nameservers 8.8.8.8 8.8.4.4
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

EOF

tee /etc/opt/interfaces <<EOF
### Interfaces
source /etc/network/interfaces.d/*

### Loopback network interface
auto lo
iface lo inet loopback

### Ethernet
allow-hotplug eth0
iface eth0 inet dhcp
    #address 10.0.0.10
    #netmask 255.255.255.0
    #gateway 10.0.0.1
    #dns-nameservers 8.8.8.8 8.8.4.4

### Mobile tether
#allow-hotplug usb0
#iface usb0 inet dhcp

### Wifi
allow-hotplug wlan0
iface wlan0 inet dhcp
	wireless-power off
	wlan_address 10.0.0.10
	wlan_netmask 255.255.255.0
	wlan_gateway 10.0.0.1
	wlan_dns-nameservers 8.8.8.8 8.8.4.4
	wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf

EOF

tee /etc/opt/wpa_supplicant.manual <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
	ssid="mywifissid"
	scan_ssid=1
	key_mgmt=WPA-PSK
	psk="wifipasskey"
}
EOF

tee /etc/opt/wpa_supplicant.conf <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=

network={
	name=
	scan_ssid=1
	key_mgmt=WPA-PSK
	password=
}
EOF
echo Done.

### ZSWAP
echo
echo Adding zramswap config.
sleep 1s
rm -f /etc/default/zramswap
mv -f zramswap.conf /etc/default/zramswap
chown root:root /etc/default/zramswap
echo Done.

### MOTD instructions
echo
echo Adding motd first boot.
sleep 1s
rm -f /etc/motd
mv -f motd /etc/motd
mv -f new.motd /etc/new.motd
chown root:root /etc/motd
chown root:root /etc/new.motd
echo Done.

#### Clean up packages
echo
echo Cleaning up.
sleep 1s
apt -y autoremove
apt -y clean
apt -y autoclean
echo Done.

###
echo
echo Adding regdb.
sleep 1s
apt update
apt install -y crda
git clone https://kernel.googlesource.com/pub/scm/linux/kernel/git/sforshee/wireless-regdb
echo
echo Moving db files.
sleep 1s
cd wireless-regdb
cp -f regulatory.db /lib/firmware/regulatory.db
cp -f regulatory.db.p7s /lib/firmware/regulatory.db.p7s
cd ~
rm -fdr wireless-regdb
echo Done.

### Adding sys-mods
echo
echo Building raspi-sys-mods package.
sleep 1s
apt install -y debhelper d-shlibs rfkill dosfstools psmisc
git clone https://github.com/RPi-Distro/raspberrypi-sys-mods.git
mv raspberrypi-sys-mods.patch raspberrypi-sys-mods/
cd raspberrypi-sys-mods
patch -p1 < raspberrypi-sys-mods.patch
rm -f raspberrypi-sys-mods.patch
dpkg-buildpackage -us -uc
cd ~
dpkg -i raspberrypi-sys-mods*.deb
rm -fdR raspberrypi-sys-mods*
echo Done.

#### Sudoers file 
echo
echo Create sudoers file.
sleep 1s
rm -f /etc/sudoers.d/010_pi-nopasswd
tee /etc/sudoers.d/010_${user}-nopasswd <<EOF
${user} ALL=(ALL) NOPASSWD: ALL
EOF
echo Done.

### Bluez firmware.
echo
echo Installing bluetooth.
sleep 1s
apt install -y bluetooth bluez bluez-tools
echo Done.
echo
echo Building bluez firmware package.
sleep 1s
mkdir -p bluez-firmware
cd bluez-firmware
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/b/bluez-firmware/bluez-firmware_1.2.orig.tar.gz
tar xf bluez-firmware_1.2.orig.tar.gz
cd bluez-firmware-1.2
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/b/bluez-firmware/bluez-firmware_1.2-4+rpt3.debian.tar.xz
tar xf bluez-firmware_1.2-4+rpt3.debian.tar.xz
rm -f bluez-firmware_1.2-4+rpt3.debian.tar.xz
dpkg-buildpackage -us -uc
cd ..
dpkg -i bluez-firmware_*.deb
cd ~
rm -fdR bluez-firmware
echo Done.

### Pi Bluetooth
echo
echo Building pi bluetooth package.
sleep 1s
git clone https://github.com/RPi-Distro/pi-bluetooth.git
cd pi-bluetooth
dpkg-buildpackage -us -uc
cd ~
dpkg -i pi-bluetooth_*.deb
rm -fdR pi-bluetooth*
echo Done.

### Htop
echo
echo Installing htop with cpufreq and thermal support.
sleep 1s
git clone https://github.com/leeadama/htop.git
cd htop
./autogen.sh
./configure --prefix=/usr
make
make install
cd ~
rm -fdr htop
echo Done.

### Fixing bluez
echo
echo Fixing bluetooth.
sleep 1s
wget -cq --show-progress https://github.com/pyavitz/binary/releases/download/060420/bluez-5.52.tar.xz
echo Done.
echo
tar xf bluez-5.52.tar.xz
rm -f bluez-5.52.tar.xz
cd bluez-5.52
rm -f *dbgsym_5.52*
rm -f *cups_5.52*
rm -f *source_5.52*
dpkg -i *.deb
cd ..
rm -fdR bluez-5.52
apt-mark hold bluez
echo Done.

###  Adding raspi userland
echo
echo Adding raspi userland.
rm -f /etc/profile
mv -f profile /etc/profile
mv rpi-vc.conf /etc/ld.so.conf.d/rpi-vc.conf
chown root:root /etc/profile
chown root:root /etc/ld.so.conf.d/rpi-vc.conf
sleep 1s
mkdir -p /opt
git clone https://github.com/raspberrypi/userland.git
mv -f userland-remove-hi-pi.patch /root/userland/
cd userland
patch -p1 < userland-remove-hi-pi.patch
rm -f userland-remove-hi-pi.patch
./buildme --aarch64
cd ~
rm -f -d -R userland
ldconfig
echo Done.

### Adding eeprom
echo
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
echo Checking for updates.
apt update
echo
echo Installing rpi-eeprom.
sleep 1s
apt install help2man rsync python pciutils -y
###
mkdir -p ~/eeprom
mkdir -p /usr/local/src
cp -f rpi-eeprom-update.patch /usr/local/src/
mv -f rpi-eeprom-update.patch ~/eeprom/
cp -f rpi-eeprom-control.patch /usr/local/src/
mv -f rpi-eeprom-control.patch ~/eeprom/
cd ~/eeprom
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
wget -cq --show-progress https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}.orig.tar.gz
tar xf rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
rm -f rpi-eeprom_${EEPROM_VERSION}-1.debian.tar.xz
mkdir -p debian/patches
mv rpi-eeprom-update.patch debian/patches/rpi-eeprom-update.patch
echo rpi-eeprom-update.patch >> debian/patches/series
mv -f debian rpi-eeprom-${EEPROM_VERSION}/
mv rpi-eeprom-control.patch rpi-eeprom-${EEPROM_VERSION}/
cd rpi-eeprom-${EEPROM_VERSION}
patch -p1 < rpi-eeprom-control.patch
rm -f rpi-eeprom-control.patch
dpkg-buildpackage -us -uc
cd ..
dpkg -i *.deb
cd ..
rm -fdr eeprom
echo
echo Adding user eeprom config.
tee /home/${user}/.eeprom <<EOF
# EEPROM CONFIG
## https://archive.raspberrypi.org/debian/pool/main/r/rpi-eeprom/
EEPROM_VERSION="${EEPROM_VERSION}"
EOF
echo Done.

#### Kernel
echo
echo Installing kernel.
apt -y clean
apt -y autoclean
sleep 1s
cd ~
dpkg -i *.deb
rm -f *.deb
echo Done.
sleep 1s

### Add bcm2835 v4l2
echo
echo Adding bcm2835 v4l2 to modules.
rm -f /etc/modules
tee /etc/modules <<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.
#bcm2835-v4l2

EOF
chown root:root /etc/modules
echo Done.

### Adding groups
echo
echo Adding to more groups.
sleep 1s
adduser ${user} plugdev
adduser ${user} netdev
adduser ${user} bluetooth
adduser ${user} input
adduser ${user} tty
addgroup --gid 125 kvm
echo Done.

#### Checking for changes
echo
echo Checking for changes.
apt update
apt upgrade -y
apt -y clean
apt -y autoclean
echo Done.

rm -f *.patch

### Vchiq permissions
echo 'SUBSYSTEM=="vchiq",GROUP="video",MODE="0660"' > /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vcio",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules
echo 'SUBSYSTEM=="vc-mem",GROUP="video",MODE="0660"' >> /etc/udev/rules.d/10-vchiq-permissions.rules

# Load services
echo
echo Adding services
chmod +x /etc/init.d/governor
chmod +x /etc/init.d/firstboot
chmod +x /etc/init.d/pwrledoff
chmod +x /etc/init.d/actledoff
chmod +x /etc/init.d/bthelper
chmod +x /etc/init.d/zramswap
chmod +x /etc/init.d/network
chmod +x /etc/init.d/credentials
update-rc.d -f networking remove
update-rc.d firstboot defaults 2
update-rc.d governor defaults 2
update-rc.d bthelper defaults 2
update-rc.d zramswap defaults 2
#update-rc.d network defaults S
update-rc.d credentials defaults 2
#update-rc.d pwrledoff defaults 2
#update-rc.d actledoff defaults 2
echo Done.
### Own it
chown -R ${user}:${user} /home/${user}
###### Finish
echo
echo Moving out of stage2 and into IMG creation
sleep 2s

umount /proc /sys
